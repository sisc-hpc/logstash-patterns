# Grok patterns for Key-Value pair messages, where the useful payload is
# encoded as a list of key=value strings.
#
# All these should put the useful payload into the variable KEYVALUEDATA,
# to ensure it will be parsed properly by the kv filter
# - JUBE suite messages
#     - STREAM
#     - WRF
#     - IMB

MODULE_NAME [-a-zA-Z0-9/.]+
EXEC_HOST [-a-zA-Z0-9/+.,]+
JOB_INPUT [-a-zA-Z0-9/._]+
REALWORD [\w-]+

STREAM_MSG stream_copy=%{NUMBER:stream_copy:float} stream_scale=%{NUMBER:stream_scale:float} stream_add=%{NUMBER:stream_add:float} stream_triad=%{NUMBER:stream_triad:float}
WRF_MSG wrf_success=%{WORD:success}
IMB_MSG benchmark=%{REALWORD:benchmark} bytes=%{NUMBER:bytes:int} iter=%{INT:iter:int} t_min_us=%{NUMBER:t_min_us:float} t_max_us=%{NUMBER:t_max_us:float} t_avg_us=%{NUMBER:t_avg_us:float} rate=(%{INT:rate:int})?

JUBE_INFO cluster=%{REALWORD:cluster} jube_id=%{REALWORD:jube_id} jube_label=%{REALWORD:jube_label}
JUBE_TIME_INFO time=%{TIMESTAMP_ISO8601:time} seconds=%{INT:seconds:int}
JUBE_ENV_INFO user=%{USERNAME_PAT} host=%{REALWORD:host} module=%{MODULE_NAME:module} input=%{JOB_INPUT:input}
JUBE_JOB_INFO pbs_job_id=%{REALWORD:pbs_job_id} pbs_nodes=%{EXEC_HOST:pbs_nodes} pbs_ppn=(%{INT:pbs_ppn:int})? exec_host=%{EXEC_HOST:exec_host}
JUBE_TIMING_INFO cputime=%{INT:cputime:int} walltime=%{INT:walltime:int}
JUBE_BENCHMARK_RESULTS compute_walltime=(%{INT:compute_walltime:int})? (%{STREAM_MSG}|%{WRF_MSG}|%{IMB_MSG})

JUBE_MSG JUBE %{JUBE_INFO} %{JUBE_TIME_INFO} %{JUBE_ENV_INFO} %{JUBE_JOB_INFO} %{JUBE_TIMING_INFO} %{JUBE_BENCHMARK_RESULTS}
